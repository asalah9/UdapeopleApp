version: 2.1

commands:
    install_awscli:
      description: Install AWS CLI v2
      steps:
        - run:
            name: Install AWS CLI v2
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

    install_ansible:
      description: Install Ansible
      steps:
        - run:
            name: Install Ansible
            command: |
              sudo apt update
              sudo apt install software-properties-common -y
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible -y

    install_nodejs:
      description: Install Node.js 13
      steps:
        - run:
            name: Install Node.js 13
            command: |
              # Install Node.js LTS version as our base Node.js version
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt install -y nodejs
              # Use n version manager to use Node.js v13.8.0 
              sudo npm install --global n
              sudo n 13.8.0

    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
          WORKFLOW_ID: 
            type: string
            default:  ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              echo "Destroying FE | BE infrastructure"
              aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.WORKFLOW_ID >>"
              aws s3 rm s3://udapeople-<<parameters.WORKFLOW_ID>> --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.WORKFLOW_ID >>"



    revert-migrations:
      description: Revert the last migration
      parameters:
          WORKFLOW_ID:
              type: string 
              default:  ${CIRCLE_WORKFLOW_ID:0:7}     
      steps:
          - run:
              name: Revert migrations
              when: on_fail
              command: |

                  # Example: kvdb.io
                  SUCCESS=$(curl --insecure  https://kvdb.io/QEUC63x5p8Kt7SXw3HgsoB/migration_<< parameters.WORKFLOW_ID >>)
                  # Logic for reverting the database state
                  if (( $SUCCESS == 1 ));
                  then
                      cd ~/project/backend
                      npm install
                      npm run migration:revert
                  fi  
          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            ls
            npm install     #Installing project dependencies
            npm run build
            ls  #found that a new folder is created (dist) to contain our built project
            cd dist
            ls
      - save_cache:
          paths: [frontend/node_modules]  #default path of installing npm package manager dependencies
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test       #Apply npm unit test for the app code
      - save_cache:
          paths: [frontend/node_modules]  #default path of installing npm package manager dependencies
          key: frontend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end 
          command: |
            cd backend
            npm install
            npm run test         #use npm run test to Unit test the code
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  scan-frontend:
    docker:
      - image : circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical



      - save_cache:
          paths: [frontend/node_modules]  #default path of installing npm package manager dependencies
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan Back-end 
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix  --force
            npm audit fix  --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image : amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility #AVOID missing tar in docker image amazon/aws-cli error
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command : |
              aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text  >> ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt   #Verify
           
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
# Here's where you will add some code to rollback on failures
      - destroy-environment
      
     

#   configure-infrastructure:

  configure-infrastructure: 
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["4c:64:3b:5d:0f:98:a5:c3:fb:f7:c8:1f:78:dc:55:fc"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
            at: ~/ 
      - run:
          name: Configure server
          command: |
            pwd #current work dir
            ls
            cd .circleci/ansible
            cat inventory.txt 
            ansible-playbook -i inventory.txt configure-server.yml
#       # Here's where you will add some code to rollback on failure      
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            ls
            #npm cache clean --force
            npm install
            npm run migrations >> migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations



  deploy-frontend:
    docker:
      - image : cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            ls
            npm install
      - run:
          name: Get backend url  #connecting FE-BE by setting env variable API_URL
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress'  --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env  
            cat frontend/.env   
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
      - revert-migrations 

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
            at: ~/       
      - install_awscli
      - install_ansible
      - install_nodejs
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["4c:64:3b:5d:0f:98:a5:c3:fb:f7:c8:1f:78:dc:55:fc"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            pwd
            cd backend
            ls
            npm install
            npm run build
            ls
            tar -czf artifact.tar.gz dist/* package* 
            ls
            cp artifact.tar.gz /home/circleci/project/.circleci/ansible/roles/deploy/files #for ansible taskbook deploy
            ls /home/circleci/project/.circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failures  
      - destroy-environment
      - revert-migrations 

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: cimg/base:stable 
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress'  --output text)
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Backend smoke test.
          command: |
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations 
#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]